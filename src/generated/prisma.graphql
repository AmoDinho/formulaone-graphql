# source: https://fan-boost-new-eb982e7d8c.herokuapp.com/boost/dev
# timestamp: Wed Dec 05 2018 11:58:14 GMT+0200 (South Africa Standard Time)

type AggregateCircuit {
  count: Int!
}

type AggregateDriver {
  count: Int!
}

type AggregateFanBoost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Circuit implements Node {
  id: ID!
  name: String!
  country: String!
  numOfLaps: Int!
  description: String!
  raceDistance: Float!
  circuitLength: Float!
  lapRecord: Float!
  address: String!
  longitude: Float!
  latitude: Float!
  flyAway: Boolean!
  postedBy: User
  trackMap: String!
  trackImage: String!
}

"""A connection to a list of items."""
type CircuitConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CircuitEdge]!
  aggregate: AggregateCircuit!
}

input CircuitCreateInput {
  name: String!
  country: String!
  numOfLaps: Int!
  description: String!
  raceDistance: Float!
  circuitLength: Float!
  lapRecord: Float!
  address: String!
  longitude: Float!
  latitude: Float!
  flyAway: Boolean!
  trackMap: String!
  trackImage: String!
  postedBy: UserCreateOneWithoutCircuitsInput
}

input CircuitCreateManyWithoutPostedByInput {
  create: [CircuitCreateWithoutPostedByInput!]
  connect: [CircuitWhereUniqueInput!]
}

input CircuitCreateWithoutPostedByInput {
  name: String!
  country: String!
  numOfLaps: Int!
  description: String!
  raceDistance: Float!
  circuitLength: Float!
  lapRecord: Float!
  address: String!
  longitude: Float!
  latitude: Float!
  flyAway: Boolean!
  trackMap: String!
  trackImage: String!
}

"""An edge in a connection."""
type CircuitEdge {
  """The item at the end of the edge."""
  node: Circuit!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CircuitOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  country_ASC
  country_DESC
  numOfLaps_ASC
  numOfLaps_DESC
  description_ASC
  description_DESC
  raceDistance_ASC
  raceDistance_DESC
  circuitLength_ASC
  circuitLength_DESC
  lapRecord_ASC
  lapRecord_DESC
  address_ASC
  address_DESC
  longitude_ASC
  longitude_DESC
  latitude_ASC
  latitude_DESC
  flyAway_ASC
  flyAway_DESC
  trackMap_ASC
  trackMap_DESC
  trackImage_ASC
  trackImage_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CircuitPreviousValues {
  id: ID!
  name: String!
  country: String!
  numOfLaps: Int!
  description: String!
  raceDistance: Float!
  circuitLength: Float!
  lapRecord: Float!
  address: String!
  longitude: Float!
  latitude: Float!
  flyAway: Boolean!
  trackMap: String!
  trackImage: String!
}

input CircuitScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CircuitScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CircuitScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CircuitScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  numOfLaps: Int

  """All values that are not equal to given value."""
  numOfLaps_not: Int

  """All values that are contained in given list."""
  numOfLaps_in: [Int!]

  """All values that are not contained in given list."""
  numOfLaps_not_in: [Int!]

  """All values less than the given value."""
  numOfLaps_lt: Int

  """All values less than or equal the given value."""
  numOfLaps_lte: Int

  """All values greater than the given value."""
  numOfLaps_gt: Int

  """All values greater than or equal the given value."""
  numOfLaps_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  raceDistance: Float

  """All values that are not equal to given value."""
  raceDistance_not: Float

  """All values that are contained in given list."""
  raceDistance_in: [Float!]

  """All values that are not contained in given list."""
  raceDistance_not_in: [Float!]

  """All values less than the given value."""
  raceDistance_lt: Float

  """All values less than or equal the given value."""
  raceDistance_lte: Float

  """All values greater than the given value."""
  raceDistance_gt: Float

  """All values greater than or equal the given value."""
  raceDistance_gte: Float
  circuitLength: Float

  """All values that are not equal to given value."""
  circuitLength_not: Float

  """All values that are contained in given list."""
  circuitLength_in: [Float!]

  """All values that are not contained in given list."""
  circuitLength_not_in: [Float!]

  """All values less than the given value."""
  circuitLength_lt: Float

  """All values less than or equal the given value."""
  circuitLength_lte: Float

  """All values greater than the given value."""
  circuitLength_gt: Float

  """All values greater than or equal the given value."""
  circuitLength_gte: Float
  lapRecord: Float

  """All values that are not equal to given value."""
  lapRecord_not: Float

  """All values that are contained in given list."""
  lapRecord_in: [Float!]

  """All values that are not contained in given list."""
  lapRecord_not_in: [Float!]

  """All values less than the given value."""
  lapRecord_lt: Float

  """All values less than or equal the given value."""
  lapRecord_lte: Float

  """All values greater than the given value."""
  lapRecord_gt: Float

  """All values greater than or equal the given value."""
  lapRecord_gte: Float
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  longitude: Float

  """All values that are not equal to given value."""
  longitude_not: Float

  """All values that are contained in given list."""
  longitude_in: [Float!]

  """All values that are not contained in given list."""
  longitude_not_in: [Float!]

  """All values less than the given value."""
  longitude_lt: Float

  """All values less than or equal the given value."""
  longitude_lte: Float

  """All values greater than the given value."""
  longitude_gt: Float

  """All values greater than or equal the given value."""
  longitude_gte: Float
  latitude: Float

  """All values that are not equal to given value."""
  latitude_not: Float

  """All values that are contained in given list."""
  latitude_in: [Float!]

  """All values that are not contained in given list."""
  latitude_not_in: [Float!]

  """All values less than the given value."""
  latitude_lt: Float

  """All values less than or equal the given value."""
  latitude_lte: Float

  """All values greater than the given value."""
  latitude_gt: Float

  """All values greater than or equal the given value."""
  latitude_gte: Float
  flyAway: Boolean

  """All values that are not equal to given value."""
  flyAway_not: Boolean
  trackMap: String

  """All values that are not equal to given value."""
  trackMap_not: String

  """All values that are contained in given list."""
  trackMap_in: [String!]

  """All values that are not contained in given list."""
  trackMap_not_in: [String!]

  """All values less than the given value."""
  trackMap_lt: String

  """All values less than or equal the given value."""
  trackMap_lte: String

  """All values greater than the given value."""
  trackMap_gt: String

  """All values greater than or equal the given value."""
  trackMap_gte: String

  """All values containing the given string."""
  trackMap_contains: String

  """All values not containing the given string."""
  trackMap_not_contains: String

  """All values starting with the given string."""
  trackMap_starts_with: String

  """All values not starting with the given string."""
  trackMap_not_starts_with: String

  """All values ending with the given string."""
  trackMap_ends_with: String

  """All values not ending with the given string."""
  trackMap_not_ends_with: String
  trackImage: String

  """All values that are not equal to given value."""
  trackImage_not: String

  """All values that are contained in given list."""
  trackImage_in: [String!]

  """All values that are not contained in given list."""
  trackImage_not_in: [String!]

  """All values less than the given value."""
  trackImage_lt: String

  """All values less than or equal the given value."""
  trackImage_lte: String

  """All values greater than the given value."""
  trackImage_gt: String

  """All values greater than or equal the given value."""
  trackImage_gte: String

  """All values containing the given string."""
  trackImage_contains: String

  """All values not containing the given string."""
  trackImage_not_contains: String

  """All values starting with the given string."""
  trackImage_starts_with: String

  """All values not starting with the given string."""
  trackImage_not_starts_with: String

  """All values ending with the given string."""
  trackImage_ends_with: String

  """All values not ending with the given string."""
  trackImage_not_ends_with: String
}

type CircuitSubscriptionPayload {
  mutation: MutationType!
  node: Circuit
  updatedFields: [String!]
  previousValues: CircuitPreviousValues
}

input CircuitSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CircuitSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CircuitSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CircuitSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CircuitWhereInput
}

input CircuitUpdateInput {
  name: String
  country: String
  numOfLaps: Int
  description: String
  raceDistance: Float
  circuitLength: Float
  lapRecord: Float
  address: String
  longitude: Float
  latitude: Float
  flyAway: Boolean
  trackMap: String
  trackImage: String
  postedBy: UserUpdateOneWithoutCircuitsInput
}

input CircuitUpdateManyDataInput {
  name: String
  country: String
  numOfLaps: Int
  description: String
  raceDistance: Float
  circuitLength: Float
  lapRecord: Float
  address: String
  longitude: Float
  latitude: Float
  flyAway: Boolean
  trackMap: String
  trackImage: String
}

input CircuitUpdateManyMutationInput {
  name: String
  country: String
  numOfLaps: Int
  description: String
  raceDistance: Float
  circuitLength: Float
  lapRecord: Float
  address: String
  longitude: Float
  latitude: Float
  flyAway: Boolean
  trackMap: String
  trackImage: String
}

input CircuitUpdateManyWithoutPostedByInput {
  create: [CircuitCreateWithoutPostedByInput!]
  connect: [CircuitWhereUniqueInput!]
  disconnect: [CircuitWhereUniqueInput!]
  delete: [CircuitWhereUniqueInput!]
  update: [CircuitUpdateWithWhereUniqueWithoutPostedByInput!]
  updateMany: [CircuitUpdateManyWithWhereNestedInput!]
  deleteMany: [CircuitScalarWhereInput!]
  upsert: [CircuitUpsertWithWhereUniqueWithoutPostedByInput!]
}

input CircuitUpdateManyWithWhereNestedInput {
  where: CircuitScalarWhereInput!
  data: CircuitUpdateManyDataInput!
}

input CircuitUpdateWithoutPostedByDataInput {
  name: String
  country: String
  numOfLaps: Int
  description: String
  raceDistance: Float
  circuitLength: Float
  lapRecord: Float
  address: String
  longitude: Float
  latitude: Float
  flyAway: Boolean
  trackMap: String
  trackImage: String
}

input CircuitUpdateWithWhereUniqueWithoutPostedByInput {
  where: CircuitWhereUniqueInput!
  data: CircuitUpdateWithoutPostedByDataInput!
}

input CircuitUpsertWithWhereUniqueWithoutPostedByInput {
  where: CircuitWhereUniqueInput!
  update: CircuitUpdateWithoutPostedByDataInput!
  create: CircuitCreateWithoutPostedByInput!
}

input CircuitWhereInput {
  """Logical AND on all given filters."""
  AND: [CircuitWhereInput!]

  """Logical OR on all given filters."""
  OR: [CircuitWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CircuitWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  numOfLaps: Int

  """All values that are not equal to given value."""
  numOfLaps_not: Int

  """All values that are contained in given list."""
  numOfLaps_in: [Int!]

  """All values that are not contained in given list."""
  numOfLaps_not_in: [Int!]

  """All values less than the given value."""
  numOfLaps_lt: Int

  """All values less than or equal the given value."""
  numOfLaps_lte: Int

  """All values greater than the given value."""
  numOfLaps_gt: Int

  """All values greater than or equal the given value."""
  numOfLaps_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  raceDistance: Float

  """All values that are not equal to given value."""
  raceDistance_not: Float

  """All values that are contained in given list."""
  raceDistance_in: [Float!]

  """All values that are not contained in given list."""
  raceDistance_not_in: [Float!]

  """All values less than the given value."""
  raceDistance_lt: Float

  """All values less than or equal the given value."""
  raceDistance_lte: Float

  """All values greater than the given value."""
  raceDistance_gt: Float

  """All values greater than or equal the given value."""
  raceDistance_gte: Float
  circuitLength: Float

  """All values that are not equal to given value."""
  circuitLength_not: Float

  """All values that are contained in given list."""
  circuitLength_in: [Float!]

  """All values that are not contained in given list."""
  circuitLength_not_in: [Float!]

  """All values less than the given value."""
  circuitLength_lt: Float

  """All values less than or equal the given value."""
  circuitLength_lte: Float

  """All values greater than the given value."""
  circuitLength_gt: Float

  """All values greater than or equal the given value."""
  circuitLength_gte: Float
  lapRecord: Float

  """All values that are not equal to given value."""
  lapRecord_not: Float

  """All values that are contained in given list."""
  lapRecord_in: [Float!]

  """All values that are not contained in given list."""
  lapRecord_not_in: [Float!]

  """All values less than the given value."""
  lapRecord_lt: Float

  """All values less than or equal the given value."""
  lapRecord_lte: Float

  """All values greater than the given value."""
  lapRecord_gt: Float

  """All values greater than or equal the given value."""
  lapRecord_gte: Float
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  longitude: Float

  """All values that are not equal to given value."""
  longitude_not: Float

  """All values that are contained in given list."""
  longitude_in: [Float!]

  """All values that are not contained in given list."""
  longitude_not_in: [Float!]

  """All values less than the given value."""
  longitude_lt: Float

  """All values less than or equal the given value."""
  longitude_lte: Float

  """All values greater than the given value."""
  longitude_gt: Float

  """All values greater than or equal the given value."""
  longitude_gte: Float
  latitude: Float

  """All values that are not equal to given value."""
  latitude_not: Float

  """All values that are contained in given list."""
  latitude_in: [Float!]

  """All values that are not contained in given list."""
  latitude_not_in: [Float!]

  """All values less than the given value."""
  latitude_lt: Float

  """All values less than or equal the given value."""
  latitude_lte: Float

  """All values greater than the given value."""
  latitude_gt: Float

  """All values greater than or equal the given value."""
  latitude_gte: Float
  flyAway: Boolean

  """All values that are not equal to given value."""
  flyAway_not: Boolean
  trackMap: String

  """All values that are not equal to given value."""
  trackMap_not: String

  """All values that are contained in given list."""
  trackMap_in: [String!]

  """All values that are not contained in given list."""
  trackMap_not_in: [String!]

  """All values less than the given value."""
  trackMap_lt: String

  """All values less than or equal the given value."""
  trackMap_lte: String

  """All values greater than the given value."""
  trackMap_gt: String

  """All values greater than or equal the given value."""
  trackMap_gte: String

  """All values containing the given string."""
  trackMap_contains: String

  """All values not containing the given string."""
  trackMap_not_contains: String

  """All values starting with the given string."""
  trackMap_starts_with: String

  """All values not starting with the given string."""
  trackMap_not_starts_with: String

  """All values ending with the given string."""
  trackMap_ends_with: String

  """All values not ending with the given string."""
  trackMap_not_ends_with: String
  trackImage: String

  """All values that are not equal to given value."""
  trackImage_not: String

  """All values that are contained in given list."""
  trackImage_in: [String!]

  """All values that are not contained in given list."""
  trackImage_not_in: [String!]

  """All values less than the given value."""
  trackImage_lt: String

  """All values less than or equal the given value."""
  trackImage_lte: String

  """All values greater than the given value."""
  trackImage_gt: String

  """All values greater than or equal the given value."""
  trackImage_gte: String

  """All values containing the given string."""
  trackImage_contains: String

  """All values not containing the given string."""
  trackImage_not_contains: String

  """All values starting with the given string."""
  trackImage_starts_with: String

  """All values not starting with the given string."""
  trackImage_not_starts_with: String

  """All values ending with the given string."""
  trackImage_ends_with: String

  """All values not ending with the given string."""
  trackImage_not_ends_with: String
  postedBy: UserWhereInput
}

input CircuitWhereUniqueInput {
  id: ID
}

scalar DateTime

type Driver implements Node {
  id: ID!
  createdAt: DateTime!
  number: Int
  name: String!
  team: String!
  points: Int!
  pictureURL: String!
  country: String!
  podiums: Int!
  championshipWins: Int!
  postedBy: User
  boosts(where: FanBoostWhereInput, orderBy: FanBoostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FanBoost!]
}

"""A connection to a list of items."""
type DriverConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DriverEdge]!
  aggregate: AggregateDriver!
}

input DriverCreateInput {
  number: Int
  name: String!
  team: String!
  points: Int!
  pictureURL: String!
  country: String!
  podiums: Int!
  championshipWins: Int!
  postedBy: UserCreateOneWithoutDriversInput
  boosts: FanBoostCreateManyWithoutDriverInput
}

input DriverCreateManyWithoutPostedByInput {
  create: [DriverCreateWithoutPostedByInput!]
  connect: [DriverWhereUniqueInput!]
}

input DriverCreateOneWithoutBoostsInput {
  create: DriverCreateWithoutBoostsInput
  connect: DriverWhereUniqueInput
}

input DriverCreateWithoutBoostsInput {
  number: Int
  name: String!
  team: String!
  points: Int!
  pictureURL: String!
  country: String!
  podiums: Int!
  championshipWins: Int!
  postedBy: UserCreateOneWithoutDriversInput
}

input DriverCreateWithoutPostedByInput {
  number: Int
  name: String!
  team: String!
  points: Int!
  pictureURL: String!
  country: String!
  podiums: Int!
  championshipWins: Int!
  boosts: FanBoostCreateManyWithoutDriverInput
}

"""An edge in a connection."""
type DriverEdge {
  """The item at the end of the edge."""
  node: Driver!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DriverOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  number_ASC
  number_DESC
  name_ASC
  name_DESC
  team_ASC
  team_DESC
  points_ASC
  points_DESC
  pictureURL_ASC
  pictureURL_DESC
  country_ASC
  country_DESC
  podiums_ASC
  podiums_DESC
  championshipWins_ASC
  championshipWins_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DriverPreviousValues {
  id: ID!
  createdAt: DateTime!
  number: Int
  name: String!
  team: String!
  points: Int!
  pictureURL: String!
  country: String!
  podiums: Int!
  championshipWins: Int!
}

input DriverScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DriverScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DriverScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DriverScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  team: String

  """All values that are not equal to given value."""
  team_not: String

  """All values that are contained in given list."""
  team_in: [String!]

  """All values that are not contained in given list."""
  team_not_in: [String!]

  """All values less than the given value."""
  team_lt: String

  """All values less than or equal the given value."""
  team_lte: String

  """All values greater than the given value."""
  team_gt: String

  """All values greater than or equal the given value."""
  team_gte: String

  """All values containing the given string."""
  team_contains: String

  """All values not containing the given string."""
  team_not_contains: String

  """All values starting with the given string."""
  team_starts_with: String

  """All values not starting with the given string."""
  team_not_starts_with: String

  """All values ending with the given string."""
  team_ends_with: String

  """All values not ending with the given string."""
  team_not_ends_with: String
  points: Int

  """All values that are not equal to given value."""
  points_not: Int

  """All values that are contained in given list."""
  points_in: [Int!]

  """All values that are not contained in given list."""
  points_not_in: [Int!]

  """All values less than the given value."""
  points_lt: Int

  """All values less than or equal the given value."""
  points_lte: Int

  """All values greater than the given value."""
  points_gt: Int

  """All values greater than or equal the given value."""
  points_gte: Int
  pictureURL: String

  """All values that are not equal to given value."""
  pictureURL_not: String

  """All values that are contained in given list."""
  pictureURL_in: [String!]

  """All values that are not contained in given list."""
  pictureURL_not_in: [String!]

  """All values less than the given value."""
  pictureURL_lt: String

  """All values less than or equal the given value."""
  pictureURL_lte: String

  """All values greater than the given value."""
  pictureURL_gt: String

  """All values greater than or equal the given value."""
  pictureURL_gte: String

  """All values containing the given string."""
  pictureURL_contains: String

  """All values not containing the given string."""
  pictureURL_not_contains: String

  """All values starting with the given string."""
  pictureURL_starts_with: String

  """All values not starting with the given string."""
  pictureURL_not_starts_with: String

  """All values ending with the given string."""
  pictureURL_ends_with: String

  """All values not ending with the given string."""
  pictureURL_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  podiums: Int

  """All values that are not equal to given value."""
  podiums_not: Int

  """All values that are contained in given list."""
  podiums_in: [Int!]

  """All values that are not contained in given list."""
  podiums_not_in: [Int!]

  """All values less than the given value."""
  podiums_lt: Int

  """All values less than or equal the given value."""
  podiums_lte: Int

  """All values greater than the given value."""
  podiums_gt: Int

  """All values greater than or equal the given value."""
  podiums_gte: Int
  championshipWins: Int

  """All values that are not equal to given value."""
  championshipWins_not: Int

  """All values that are contained in given list."""
  championshipWins_in: [Int!]

  """All values that are not contained in given list."""
  championshipWins_not_in: [Int!]

  """All values less than the given value."""
  championshipWins_lt: Int

  """All values less than or equal the given value."""
  championshipWins_lte: Int

  """All values greater than the given value."""
  championshipWins_gt: Int

  """All values greater than or equal the given value."""
  championshipWins_gte: Int
}

type DriverSubscriptionPayload {
  mutation: MutationType!
  node: Driver
  updatedFields: [String!]
  previousValues: DriverPreviousValues
}

input DriverSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DriverSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DriverSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DriverSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DriverWhereInput
}

input DriverUpdateInput {
  number: Int
  name: String
  team: String
  points: Int
  pictureURL: String
  country: String
  podiums: Int
  championshipWins: Int
  postedBy: UserUpdateOneWithoutDriversInput
  boosts: FanBoostUpdateManyWithoutDriverInput
}

input DriverUpdateManyDataInput {
  number: Int
  name: String
  team: String
  points: Int
  pictureURL: String
  country: String
  podiums: Int
  championshipWins: Int
}

input DriverUpdateManyMutationInput {
  number: Int
  name: String
  team: String
  points: Int
  pictureURL: String
  country: String
  podiums: Int
  championshipWins: Int
}

input DriverUpdateManyWithoutPostedByInput {
  create: [DriverCreateWithoutPostedByInput!]
  connect: [DriverWhereUniqueInput!]
  disconnect: [DriverWhereUniqueInput!]
  delete: [DriverWhereUniqueInput!]
  update: [DriverUpdateWithWhereUniqueWithoutPostedByInput!]
  updateMany: [DriverUpdateManyWithWhereNestedInput!]
  deleteMany: [DriverScalarWhereInput!]
  upsert: [DriverUpsertWithWhereUniqueWithoutPostedByInput!]
}

input DriverUpdateManyWithWhereNestedInput {
  where: DriverScalarWhereInput!
  data: DriverUpdateManyDataInput!
}

input DriverUpdateOneRequiredWithoutBoostsInput {
  create: DriverCreateWithoutBoostsInput
  connect: DriverWhereUniqueInput
  update: DriverUpdateWithoutBoostsDataInput
  upsert: DriverUpsertWithoutBoostsInput
}

input DriverUpdateWithoutBoostsDataInput {
  number: Int
  name: String
  team: String
  points: Int
  pictureURL: String
  country: String
  podiums: Int
  championshipWins: Int
  postedBy: UserUpdateOneWithoutDriversInput
}

input DriverUpdateWithoutPostedByDataInput {
  number: Int
  name: String
  team: String
  points: Int
  pictureURL: String
  country: String
  podiums: Int
  championshipWins: Int
  boosts: FanBoostUpdateManyWithoutDriverInput
}

input DriverUpdateWithWhereUniqueWithoutPostedByInput {
  where: DriverWhereUniqueInput!
  data: DriverUpdateWithoutPostedByDataInput!
}

input DriverUpsertWithoutBoostsInput {
  update: DriverUpdateWithoutBoostsDataInput!
  create: DriverCreateWithoutBoostsInput!
}

input DriverUpsertWithWhereUniqueWithoutPostedByInput {
  where: DriverWhereUniqueInput!
  update: DriverUpdateWithoutPostedByDataInput!
  create: DriverCreateWithoutPostedByInput!
}

input DriverWhereInput {
  """Logical AND on all given filters."""
  AND: [DriverWhereInput!]

  """Logical OR on all given filters."""
  OR: [DriverWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DriverWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  team: String

  """All values that are not equal to given value."""
  team_not: String

  """All values that are contained in given list."""
  team_in: [String!]

  """All values that are not contained in given list."""
  team_not_in: [String!]

  """All values less than the given value."""
  team_lt: String

  """All values less than or equal the given value."""
  team_lte: String

  """All values greater than the given value."""
  team_gt: String

  """All values greater than or equal the given value."""
  team_gte: String

  """All values containing the given string."""
  team_contains: String

  """All values not containing the given string."""
  team_not_contains: String

  """All values starting with the given string."""
  team_starts_with: String

  """All values not starting with the given string."""
  team_not_starts_with: String

  """All values ending with the given string."""
  team_ends_with: String

  """All values not ending with the given string."""
  team_not_ends_with: String
  points: Int

  """All values that are not equal to given value."""
  points_not: Int

  """All values that are contained in given list."""
  points_in: [Int!]

  """All values that are not contained in given list."""
  points_not_in: [Int!]

  """All values less than the given value."""
  points_lt: Int

  """All values less than or equal the given value."""
  points_lte: Int

  """All values greater than the given value."""
  points_gt: Int

  """All values greater than or equal the given value."""
  points_gte: Int
  pictureURL: String

  """All values that are not equal to given value."""
  pictureURL_not: String

  """All values that are contained in given list."""
  pictureURL_in: [String!]

  """All values that are not contained in given list."""
  pictureURL_not_in: [String!]

  """All values less than the given value."""
  pictureURL_lt: String

  """All values less than or equal the given value."""
  pictureURL_lte: String

  """All values greater than the given value."""
  pictureURL_gt: String

  """All values greater than or equal the given value."""
  pictureURL_gte: String

  """All values containing the given string."""
  pictureURL_contains: String

  """All values not containing the given string."""
  pictureURL_not_contains: String

  """All values starting with the given string."""
  pictureURL_starts_with: String

  """All values not starting with the given string."""
  pictureURL_not_starts_with: String

  """All values ending with the given string."""
  pictureURL_ends_with: String

  """All values not ending with the given string."""
  pictureURL_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  podiums: Int

  """All values that are not equal to given value."""
  podiums_not: Int

  """All values that are contained in given list."""
  podiums_in: [Int!]

  """All values that are not contained in given list."""
  podiums_not_in: [Int!]

  """All values less than the given value."""
  podiums_lt: Int

  """All values less than or equal the given value."""
  podiums_lte: Int

  """All values greater than the given value."""
  podiums_gt: Int

  """All values greater than or equal the given value."""
  podiums_gte: Int
  championshipWins: Int

  """All values that are not equal to given value."""
  championshipWins_not: Int

  """All values that are contained in given list."""
  championshipWins_in: [Int!]

  """All values that are not contained in given list."""
  championshipWins_not_in: [Int!]

  """All values less than the given value."""
  championshipWins_lt: Int

  """All values less than or equal the given value."""
  championshipWins_lte: Int

  """All values greater than the given value."""
  championshipWins_gt: Int

  """All values greater than or equal the given value."""
  championshipWins_gte: Int
  postedBy: UserWhereInput
  boosts_every: FanBoostWhereInput
  boosts_some: FanBoostWhereInput
  boosts_none: FanBoostWhereInput
}

input DriverWhereUniqueInput {
  id: ID
}

type FanBoost implements Node {
  id: ID!
  driver: Driver!
  user: User!
}

"""A connection to a list of items."""
type FanBoostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FanBoostEdge]!
  aggregate: AggregateFanBoost!
}

input FanBoostCreateInput {
  driver: DriverCreateOneWithoutBoostsInput!
  user: UserCreateOneWithoutBoostsInput!
}

input FanBoostCreateManyWithoutDriverInput {
  create: [FanBoostCreateWithoutDriverInput!]
  connect: [FanBoostWhereUniqueInput!]
}

input FanBoostCreateManyWithoutUserInput {
  create: [FanBoostCreateWithoutUserInput!]
  connect: [FanBoostWhereUniqueInput!]
}

input FanBoostCreateWithoutDriverInput {
  user: UserCreateOneWithoutBoostsInput!
}

input FanBoostCreateWithoutUserInput {
  driver: DriverCreateOneWithoutBoostsInput!
}

"""An edge in a connection."""
type FanBoostEdge {
  """The item at the end of the edge."""
  node: FanBoost!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FanBoostOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FanBoostPreviousValues {
  id: ID!
}

input FanBoostScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FanBoostScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FanBoostScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FanBoostScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type FanBoostSubscriptionPayload {
  mutation: MutationType!
  node: FanBoost
  updatedFields: [String!]
  previousValues: FanBoostPreviousValues
}

input FanBoostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FanBoostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FanBoostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FanBoostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FanBoostWhereInput
}

input FanBoostUpdateInput {
  driver: DriverUpdateOneRequiredWithoutBoostsInput
  user: UserUpdateOneRequiredWithoutBoostsInput
}

input FanBoostUpdateManyWithoutDriverInput {
  create: [FanBoostCreateWithoutDriverInput!]
  connect: [FanBoostWhereUniqueInput!]
  disconnect: [FanBoostWhereUniqueInput!]
  delete: [FanBoostWhereUniqueInput!]
  update: [FanBoostUpdateWithWhereUniqueWithoutDriverInput!]
  deleteMany: [FanBoostScalarWhereInput!]
  upsert: [FanBoostUpsertWithWhereUniqueWithoutDriverInput!]
}

input FanBoostUpdateManyWithoutUserInput {
  create: [FanBoostCreateWithoutUserInput!]
  connect: [FanBoostWhereUniqueInput!]
  disconnect: [FanBoostWhereUniqueInput!]
  delete: [FanBoostWhereUniqueInput!]
  update: [FanBoostUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [FanBoostScalarWhereInput!]
  upsert: [FanBoostUpsertWithWhereUniqueWithoutUserInput!]
}

input FanBoostUpdateWithoutDriverDataInput {
  user: UserUpdateOneRequiredWithoutBoostsInput
}

input FanBoostUpdateWithoutUserDataInput {
  driver: DriverUpdateOneRequiredWithoutBoostsInput
}

input FanBoostUpdateWithWhereUniqueWithoutDriverInput {
  where: FanBoostWhereUniqueInput!
  data: FanBoostUpdateWithoutDriverDataInput!
}

input FanBoostUpdateWithWhereUniqueWithoutUserInput {
  where: FanBoostWhereUniqueInput!
  data: FanBoostUpdateWithoutUserDataInput!
}

input FanBoostUpsertWithWhereUniqueWithoutDriverInput {
  where: FanBoostWhereUniqueInput!
  update: FanBoostUpdateWithoutDriverDataInput!
  create: FanBoostCreateWithoutDriverInput!
}

input FanBoostUpsertWithWhereUniqueWithoutUserInput {
  where: FanBoostWhereUniqueInput!
  update: FanBoostUpdateWithoutUserDataInput!
  create: FanBoostCreateWithoutUserInput!
}

input FanBoostWhereInput {
  """Logical AND on all given filters."""
  AND: [FanBoostWhereInput!]

  """Logical OR on all given filters."""
  OR: [FanBoostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FanBoostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  driver: DriverWhereInput
  user: UserWhereInput
}

input FanBoostWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createDriver(data: DriverCreateInput!): Driver!
  createUser(data: UserCreateInput!): User!
  createFanBoost(data: FanBoostCreateInput!): FanBoost!
  createCircuit(data: CircuitCreateInput!): Circuit!
  updateDriver(data: DriverUpdateInput!, where: DriverWhereUniqueInput!): Driver
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateFanBoost(data: FanBoostUpdateInput!, where: FanBoostWhereUniqueInput!): FanBoost
  updateCircuit(data: CircuitUpdateInput!, where: CircuitWhereUniqueInput!): Circuit
  deleteDriver(where: DriverWhereUniqueInput!): Driver
  deleteUser(where: UserWhereUniqueInput!): User
  deleteFanBoost(where: FanBoostWhereUniqueInput!): FanBoost
  deleteCircuit(where: CircuitWhereUniqueInput!): Circuit
  upsertDriver(where: DriverWhereUniqueInput!, create: DriverCreateInput!, update: DriverUpdateInput!): Driver!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertFanBoost(where: FanBoostWhereUniqueInput!, create: FanBoostCreateInput!, update: FanBoostUpdateInput!): FanBoost!
  upsertCircuit(where: CircuitWhereUniqueInput!, create: CircuitCreateInput!, update: CircuitUpdateInput!): Circuit!
  updateManyDrivers(data: DriverUpdateManyMutationInput!, where: DriverWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyCircuits(data: CircuitUpdateManyMutationInput!, where: CircuitWhereInput): BatchPayload!
  deleteManyDrivers(where: DriverWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyFanBoosts(where: FanBoostWhereInput): BatchPayload!
  deleteManyCircuits(where: CircuitWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  drivers(where: DriverWhereInput, orderBy: DriverOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Driver]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  fanBoosts(where: FanBoostWhereInput, orderBy: FanBoostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FanBoost]!
  circuits(where: CircuitWhereInput, orderBy: CircuitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Circuit]!
  driver(where: DriverWhereUniqueInput!): Driver
  user(where: UserWhereUniqueInput!): User
  fanBoost(where: FanBoostWhereUniqueInput!): FanBoost
  circuit(where: CircuitWhereUniqueInput!): Circuit
  driversConnection(where: DriverWhereInput, orderBy: DriverOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DriverConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  fanBoostsConnection(where: FanBoostWhereInput, orderBy: FanBoostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FanBoostConnection!
  circuitsConnection(where: CircuitWhereInput, orderBy: CircuitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CircuitConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  driver(where: DriverSubscriptionWhereInput): DriverSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  fanBoost(where: FanBoostSubscriptionWhereInput): FanBoostSubscriptionPayload
  circuit(where: CircuitSubscriptionWhereInput): CircuitSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  resetToken: String
  resetTokenExpiry: Float
  password: String!
  drivers(where: DriverWhereInput, orderBy: DriverOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Driver!]
  circuits(where: CircuitWhereInput, orderBy: CircuitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Circuit!]
  boosts(where: FanBoostWhereInput, orderBy: FanBoostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FanBoost!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  resetToken: String
  resetTokenExpiry: Float
  password: String!
  drivers: DriverCreateManyWithoutPostedByInput
  circuits: CircuitCreateManyWithoutPostedByInput
  boosts: FanBoostCreateManyWithoutUserInput
}

input UserCreateOneWithoutBoostsInput {
  create: UserCreateWithoutBoostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCircuitsInput {
  create: UserCreateWithoutCircuitsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDriversInput {
  create: UserCreateWithoutDriversInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBoostsInput {
  name: String!
  email: String!
  resetToken: String
  resetTokenExpiry: Float
  password: String!
  drivers: DriverCreateManyWithoutPostedByInput
  circuits: CircuitCreateManyWithoutPostedByInput
}

input UserCreateWithoutCircuitsInput {
  name: String!
  email: String!
  resetToken: String
  resetTokenExpiry: Float
  password: String!
  drivers: DriverCreateManyWithoutPostedByInput
  boosts: FanBoostCreateManyWithoutUserInput
}

input UserCreateWithoutDriversInput {
  name: String!
  email: String!
  resetToken: String
  resetTokenExpiry: Float
  password: String!
  circuits: CircuitCreateManyWithoutPostedByInput
  boosts: FanBoostCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  resetToken: String
  resetTokenExpiry: Float
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  resetToken: String
  resetTokenExpiry: Float
  password: String
  drivers: DriverUpdateManyWithoutPostedByInput
  circuits: CircuitUpdateManyWithoutPostedByInput
  boosts: FanBoostUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  resetToken: String
  resetTokenExpiry: Float
  password: String
}

input UserUpdateOneRequiredWithoutBoostsInput {
  create: UserCreateWithoutBoostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutBoostsDataInput
  upsert: UserUpsertWithoutBoostsInput
}

input UserUpdateOneWithoutCircuitsInput {
  create: UserCreateWithoutCircuitsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCircuitsDataInput
  upsert: UserUpsertWithoutCircuitsInput
}

input UserUpdateOneWithoutDriversInput {
  create: UserCreateWithoutDriversInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutDriversDataInput
  upsert: UserUpsertWithoutDriversInput
}

input UserUpdateWithoutBoostsDataInput {
  name: String
  email: String
  resetToken: String
  resetTokenExpiry: Float
  password: String
  drivers: DriverUpdateManyWithoutPostedByInput
  circuits: CircuitUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutCircuitsDataInput {
  name: String
  email: String
  resetToken: String
  resetTokenExpiry: Float
  password: String
  drivers: DriverUpdateManyWithoutPostedByInput
  boosts: FanBoostUpdateManyWithoutUserInput
}

input UserUpdateWithoutDriversDataInput {
  name: String
  email: String
  resetToken: String
  resetTokenExpiry: Float
  password: String
  circuits: CircuitUpdateManyWithoutPostedByInput
  boosts: FanBoostUpdateManyWithoutUserInput
}

input UserUpsertWithoutBoostsInput {
  update: UserUpdateWithoutBoostsDataInput!
  create: UserCreateWithoutBoostsInput!
}

input UserUpsertWithoutCircuitsInput {
  update: UserUpdateWithoutCircuitsDataInput!
  create: UserCreateWithoutCircuitsInput!
}

input UserUpsertWithoutDriversInput {
  update: UserUpdateWithoutDriversDataInput!
  create: UserCreateWithoutDriversInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  drivers_every: DriverWhereInput
  drivers_some: DriverWhereInput
  drivers_none: DriverWhereInput
  circuits_every: CircuitWhereInput
  circuits_some: CircuitWhereInput
  circuits_none: CircuitWhereInput
  boosts_every: FanBoostWhereInput
  boosts_some: FanBoostWhereInput
  boosts_none: FanBoostWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
